{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import mysql.connector as sqlcon\n",
    "import pandas as pd\n",
    "import string\n",
    "import random\n",
    "import csv\n",
    "from random import randint\n",
    "import time\n",
    "import contextlib\n",
    "import matplotlib.pyplot as plt\n",
    "%matplotlib inline\n",
    "\n",
    "from ipywidgets import widgets as w\n",
    "from IPython.display import display"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Generate data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Team choices\n",
    "\n",
    "NFL_teams=('Cardinals', 'Falcons', 'Ravens', 'Bills', 'Panthers', 'Bears','Bengals', 'Browns', 'Cowboys', 'Broncos', 'Lions', 'Packers','Texans','Colts', 'Jaguars', 'Chiefs', 'Dolphins', 'Vikings','Patriots', 'Saints', 'Giants', 'Jets', 'Raiders', 'Eagles','Steelers', 'Rams', 'Chargers', '49ers', 'Seahawks','Buccaneers','Titans','Redskins')\n",
    "\n",
    "NFL_stadiums=('Arrowhead', 'AT&T', 'Bank of America', 'Broncos', 'CenturyLink Field', 'FedExField', 'FirstEnergy','Ford Field', 'Gillette', 'Hard Rock', 'Heinz Field', 'Lambeau Field')\n",
    "\n",
    "NFL_city=('Arizona', 'Atlanta', 'Baltimore', 'Buffalo', 'Carolina', 'Chicago','Cincinnati', 'Cleveland', 'Dallas', 'Denver', 'Detroit','Houston','Indianapolis','Jacksonville', 'Kansas', 'Miami', 'Minnesota','New England', 'New Orleans','New York', 'New York Jets', 'Oakland Raiders', 'Philadelphia','Pittsburgh','San Diego', 'San Francisco', 'Seattle','Tampa Bay','Tennessee','Washington')\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Functions\n",
    "\n",
    "def random_date():\n",
    "    year = randint(2000, 2019)\n",
    "    month = randint(1, 12)\n",
    "    if(month<10):\n",
    "        month='0'+str(month)\n",
    "    day = randint(1, 28)\n",
    "    if(day<10):\n",
    "        day='0'+str(day)\n",
    "    return str(year)+str(month)+str(day)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "def get_TeamIDs():\n",
    "    db = sqlcon.connect(user='root', \n",
    "                        password='*****', \n",
    "                        host='127.0.0.1', \n",
    "                        database='Project', \n",
    "                        auth_plugin='mysql_native_password')\n",
    "    cursor = db.cursor()\n",
    "    cursor.execute(\"SELECT TeamID FROM teams\")\n",
    "    result = cursor.fetchall()\n",
    "    db.close()\n",
    "    return [item[0] for item in result]\n",
    "\n",
    "def get_PlayerIDs():\n",
    "    db = sqlcon.connect(user='root', \n",
    "                        password='*****', \n",
    "                        host='127.0.0.1', \n",
    "                        database='Project', \n",
    "                        auth_plugin='mysql_native_password')\n",
    "    cursor = db.cursor()\n",
    "    cursor.execute(\"SELECT PlayerID FROM Players\")\n",
    "    result = cursor.fetchall()\n",
    "    db.close()\n",
    "    return [item[0] for item in result]\n",
    "\n",
    "def get_GameIDs():\n",
    "    db = sqlcon.connect(user='root', \n",
    "                        password='*****', \n",
    "                        host='127.0.0.1', \n",
    "                        database='Project', \n",
    "                        auth_plugin='mysql_native_password')\n",
    "    cursor = db.cursor()\n",
    "    cursor.execute(\"SELECT GameID FROM Games\")\n",
    "    result = cursor.fetchall()\n",
    "    db.close()\n",
    "    return [item[0] for item in result]\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Delete functions"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "def delete_players():\n",
    "    db = sqlcon.connect(user='root', \n",
    "                        password='*****', \n",
    "                        host='127.0.0.1', \n",
    "                        database='Project', \n",
    "                        auth_plugin='mysql_native_password')\n",
    "    cursor = db.cursor()\n",
    "    sql = \"DELETE FROM players\"\n",
    "    cursor.execute(sql)\n",
    "    db.commit()\n",
    "    db.close()\n",
    "    print(\"players table cleared\")\n",
    "\n",
    "def delete_teams():\n",
    "    db = sqlcon.connect(user='root', \n",
    "                        password='*****', \n",
    "                        host='127.0.0.1', \n",
    "                        database='Project', \n",
    "                        auth_plugin='mysql_native_password')\n",
    "    cursor = db.cursor()\n",
    "    sql = \"DELETE FROM teams\"\n",
    "    cursor.execute(sql)\n",
    "    db.commit()\n",
    "    db.close()\n",
    "    print(\"teams table cleared\")\n",
    "\n",
    "def delete_games():\n",
    "    db = sqlcon.connect(user='root', \n",
    "                        password='*****', \n",
    "                        host='127.0.0.1', \n",
    "                        database='Project', \n",
    "                        auth_plugin='mysql_native_password')\n",
    "    cursor = db.cursor()\n",
    "    sql = \"DELETE FROM Games\"\n",
    "    cursor.execute(sql)\n",
    "    db.commit()\n",
    "    db.close()\n",
    "    print(\"games table cleared\")\n",
    "\n",
    "def delete_play():\n",
    "    db = sqlcon.connect(user='root', \n",
    "                        password='*****', \n",
    "                        host='127.0.0.1', \n",
    "                        database='Project', \n",
    "                        auth_plugin='mysql_native_password')\n",
    "    cursor = db.cursor()\n",
    "    sql = \"DELETE FROM Play\"\n",
    "    cursor.execute(sql)\n",
    "    db.commit()\n",
    "    db.close()\n",
    "    print(\"play table cleared\")\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Insert teams"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "def insert_teams(file_name='teams.csv'):\n",
    "    vals=[]\n",
    "    with open(file_name) as input_file:\n",
    "        reader = csv.reader(input_file, delimiter=',')\n",
    "        for row in reader:\n",
    "            vals.append(tuple(row))\n",
    "        db = sqlcon.connect(user='root', \n",
    "                        password='*****', \n",
    "                        host='127.0.0.1', \n",
    "                        database='Project', \n",
    "                        auth_plugin='mysql_native_password')\n",
    "        cursor = db.cursor()\n",
    "        start = time.time()\n",
    "        for row in vals:\n",
    "            sql = \"INSERT INTO teams (TeamID, TeamName, city) VALUES (%s, %s, %s)\"\n",
    "            \n",
    "            try:\n",
    "                cursor.execute(sql, row)\n",
    "            except sqlcon.Error as e:\n",
    "                print(e.msg)\n",
    "                return e.msg\n",
    "        db.commit()\n",
    "        db.close()\n",
    "        end = time.time()\n",
    "        print(end - start, 'seconds for single insert teams')\n",
    "        s=str(end - start) + 'seconds'\n",
    "        print(file_name)\n",
    "        return s"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "def multi_row_teams(file_name='teams.csv'):\n",
    "    df = pd.read_csv(file_name, sep=',', header=None)\n",
    "    cols = str(df.columns.values.tolist()).replace('[','').replace(']', '')\n",
    "    values = list(map(tuple, df.values))\n",
    "    half = len(values) // 2\n",
    "    valuesA = values[:half]\n",
    "    valuesB = values[half:]\n",
    "    db = sqlcon.connect(user='root', \n",
    "                        password='*****', \n",
    "                        host='127.0.0.1', \n",
    "                        database='Project', \n",
    "                        auth_plugin='mysql_native_password')\n",
    "    cursor = db.cursor()\n",
    "    start = time.time()\n",
    "    \n",
    "    sql = \"insert into teams ( TeamID, TeamName, city ) values  (%s, %s, %s );\" \n",
    "    try:\n",
    "        cursor.executemany(sql, valuesA)\n",
    "    except sqlcon.Error as e:\n",
    "        print(e.msg)\n",
    "        return e.msg\n",
    "    db.commit()\n",
    "    try:\n",
    "        cursor.executemany(sql, valuesB)\n",
    "    except sqlcon.Error as e:\n",
    "        print(e.msg)\n",
    "        return e.msg\n",
    "    db.commit()\n",
    "    db.close()\n",
    "    end = time.time()\n",
    "    print(end - start, 'seconds for multi row teams')\n",
    "    s=str(end - start) + 'seconds'\n",
    "    print(file_name)\n",
    "    return s"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "def bulk_teams(file_name='teams.csv'):\n",
    "    db = sqlcon.connect(user='root', \n",
    "                        password='*****', \n",
    "                        host='127.0.0.1', \n",
    "                        database='Project', \n",
    "                        auth_plugin='mysql_native_password',\n",
    "                        allow_local_infile=True)\n",
    "    cursor = db.cursor()\n",
    "    start = time.time()\n",
    "    sql = \"LOAD DATA LOCAL INFILE \\'%s\\' INTO TABLE teams FIELDS TERMINATED BY ',' ENCLOSED BY '\\\"' LINES TERMINATED BY '\\\\r\\\\n' (TeamID, TeamName, city)\" % (file_name)\n",
    "    try:\n",
    "        cursor.execute(sql)\n",
    "    except sqlcon.Error as e:\n",
    "        print(e.msg)\n",
    "        return e.msg\n",
    "    db.commit()\n",
    "    db.close()\n",
    "    end = time.time()\n",
    "    print(end - start, 'seconds for bulk teams')\n",
    "    s=str(end - start) + 'seconds'\n",
    "    print(file_name)\n",
    "    return s"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Insert players"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "def insert_players(file_name='players.csv'):\n",
    "    vals=[]\n",
    "    with open(file_name) as input_file:\n",
    "        reader = csv.reader(input_file, delimiter=',')\n",
    "        for row in reader:\n",
    "            vals.append(tuple(row))\n",
    "        db = sqlcon.connect(user='root', \n",
    "                        password='*****', \n",
    "                        host='127.0.0.1', \n",
    "                        database='Project', \n",
    "                        auth_plugin='mysql_native_password')\n",
    "        cursor = db.cursor()\n",
    "        start = time.time()\n",
    "        for row in vals:\n",
    "            sql = \"INSERT INTO players (PlayerID, TeamID, FirstName, LastName, Position, Touchdowns, TotalYards, Salary) VALUES (%s, %s, %s, %s, %s, %s, %s, %s)\"\n",
    "            try:\n",
    "                cursor.execute(sql, row)\n",
    "            except sqlcon.Error as e:\n",
    "                print(e.msg)\n",
    "                return e.msg\n",
    "        db.commit()\n",
    "        db.close()\n",
    "        end = time.time()\n",
    "        print(end - start, 'seconds for single insert players')\n",
    "        s=str(end - start) + 'seconds'\n",
    "        print(file_name)\n",
    "        return s"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "def multi_row_players(file_name='players.csv'):\n",
    "    df = pd.read_csv(file_name, sep=',', header=None)\n",
    "    cols = str(df.columns.values.tolist()).replace('[','').replace(']', '')\n",
    "    values = list(map(tuple, df.values))\n",
    "    half = len(values) // 2\n",
    "    valuesA = values[:half]\n",
    "    valuesB = values[half:]\n",
    "    db = sqlcon.connect(user='root', \n",
    "                        password='*****', \n",
    "                        host='127.0.0.1', \n",
    "                        database='Project', \n",
    "                        auth_plugin='mysql_native_password')\n",
    "    cursor = db.cursor()\n",
    "    start = time.time()\n",
    "    \n",
    "    sql = \"INSERT INTO players (PlayerID, TeamID, FirstName, LastName, Position, Touchdowns, TotalYards, Salary) VALUES (%s, %s, %s, %s, %s, %s, %s, %s);\"\n",
    "    try:\n",
    "        cursor.executemany(sql, valuesA)\n",
    "    except sqlcon.Error as e:\n",
    "        print(e.msg)\n",
    "        return e.msg\n",
    "    db.commit()\n",
    "    try:\n",
    "        cursor.executemany(sql, valuesB)\n",
    "    except sqlcon.Error as e:\n",
    "        print(e.msg)\n",
    "        return e.msg\n",
    "    db.commit()\n",
    "    db.close()\n",
    "    end = time.time()\n",
    "    print(end - start, 'seconds for multi row players')\n",
    "    s=str(end - start) + 'seconds'\n",
    "    print(file_name)\n",
    "    return s"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "def bulk_players(file_name='players.csv'):\n",
    "    db = sqlcon.connect(user='root', \n",
    "                        password='*****', \n",
    "                        host='127.0.0.1', \n",
    "                        database='Project', \n",
    "                        auth_plugin='mysql_native_password',\n",
    "                        allow_local_infile=True)\n",
    "    cursor = db.cursor()\n",
    "    start = time.time()\n",
    "    sql = \"LOAD DATA LOCAL INFILE \\'%s\\' INTO TABLE players FIELDS TERMINATED BY ',' ENCLOSED BY '\\\"' LINES TERMINATED BY '\\\\r\\\\n' (PlayerID, TeamID, FirstName, LastName, Position, Touchdowns, TotalYards, Salary)\" % (file_name)\n",
    "    try:\n",
    "        cursor.execute(sql)\n",
    "    except sqlcon.Error as e:\n",
    "        print(e.msg)\n",
    "        return e.msg\n",
    "    db.commit()\n",
    "    db.close()\n",
    "    end = time.time()\n",
    "    print(end - start, 'seconds for bulk players')\n",
    "    print(file_name)\n",
    "    s=str(end - start) + 'seconds'\n",
    "    return s"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Insert games"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "def insert_games(file_name='games.csv'):\n",
    "    vals=[]\n",
    "    with open(file_name) as input_file:\n",
    "        reader = csv.reader(input_file, delimiter=',')\n",
    "        for row in reader:\n",
    "            vals.append(tuple(row))\n",
    "        db = sqlcon.connect(user='root', \n",
    "                        password='*****', \n",
    "                        host='127.0.0.1', \n",
    "                        database='Project', \n",
    "                        auth_plugin='mysql_native_password')\n",
    "        cursor = db.cursor()\n",
    "        start = time.time()\n",
    "        for row in vals:\n",
    "            sql = \"INSERT INTO Games (GameID, Date, Stadium, Result, Attendance, TicketRevenue) VALUES (%s, %s, %s, %s, %s, %s)\"\n",
    "            try:\n",
    "                cursor.execute(sql, row)\n",
    "            except sqlcon.Error as e:\n",
    "                print(e.msg)\n",
    "                return e.msg\n",
    "        db.commit()\n",
    "        db.close()\n",
    "        end = time.time()\n",
    "        print(end - start, 'seconds for single insert games')\n",
    "        s=str(end - start) + 'seconds for single insert games'\n",
    "        print(file_name)\n",
    "        return s"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [],
   "source": [
    "def multi_row_games(file_name='games.csv'):\n",
    "    db = sqlcon.connect(user='root', \n",
    "                        password='*****', \n",
    "                        host='127.0.0.1', \n",
    "                        database='Project', \n",
    "                        auth_plugin='mysql_native_password')\n",
    "    cursor = db.cursor()\n",
    "    df = pd.read_csv(file_name, sep=',', header=None)\n",
    "    cols = str(df.columns.values.tolist()).replace('[','').replace(']', '')\n",
    "    values = list(map(tuple, df.values))\n",
    "    half = len(values) // 2\n",
    "    valuesA = values[:half]\n",
    "    valuesB = values[half:]\n",
    "    start = time.time()\n",
    "    \n",
    "    sql = \"INSERT INTO games (GameID, Date, Stadium, Result, Attendance, TicketRevenue) VALUES (%s, %s, %s, %s, %s, %s);\"\n",
    "    try:\n",
    "        cursor.executemany(sql, valuesA)\n",
    "    except sqlcon.Error as e:\n",
    "        print(e.msg)\n",
    "        return e.msg\n",
    "    db.commit()\n",
    "    try:\n",
    "        cursor.executemany(sql, valuesB)\n",
    "    except sqlcon.Error as e:\n",
    "        print(e.msg)\n",
    "        return e.msg\n",
    "    db.commit()\n",
    "    db.close()\n",
    "    end = time.time()\n",
    "    print(end - start, 'seconds for multi row games')\n",
    "    s=str(end - start) + 'seconds'\n",
    "    print(file_name)\n",
    "    return s"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [],
   "source": [
    "def bulk_games(file_name='games.csv'):\n",
    "    db = sqlcon.connect(user='root', \n",
    "                        password='*****', \n",
    "                        host='127.0.0.1', \n",
    "                        database='Project', \n",
    "                        auth_plugin='mysql_native_password',\n",
    "                        allow_local_infile=True)\n",
    "    cursor = db.cursor()\n",
    "    start = time.time()\n",
    "    sql = \"LOAD DATA LOCAL INFILE \\'%s\\' INTO TABLE games FIELDS TERMINATED BY ',' ENCLOSED BY '\\\"' LINES TERMINATED BY '\\\\r\\\\n' (GameID, Date, Stadium, Result, Attendance, TicketRevenue)\" % (file_name)\n",
    "    try:\n",
    "        cursor.execute(sql)\n",
    "    except sqlcon.Error as e:\n",
    "        print(e.msg)\n",
    "        return e.msg\n",
    "    db.commit()\n",
    "    db.close()\n",
    "    end = time.time()\n",
    "    print(end - start, 'seconds for bulk games')\n",
    "    s=str(end - start) + 'seconds'\n",
    "    print(file_name)\n",
    "    return s"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Insert play"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [],
   "source": [
    "def insert_play(file_name='plays.csv'):\n",
    "    vals=[]\n",
    "    with open(file_name) as input_file:\n",
    "        reader = csv.reader(input_file, delimiter=',')\n",
    "        for row in reader:\n",
    "            vals.append(tuple(row))\n",
    "        db = sqlcon.connect(user='root', \n",
    "                        password='*****', \n",
    "                        host='127.0.0.1', \n",
    "                        database='Project', \n",
    "                        auth_plugin='mysql_native_password')\n",
    "        cursor = db.cursor()\n",
    "        start = time.time()\n",
    "        for row in vals:\n",
    "            sql = \"INSERT INTO Play (PlayerID, GameID) VALUES (%s, %s)\"\n",
    "            try:\n",
    "                cursor.execute(sql, row)\n",
    "            except sqlcon.Error as e:\n",
    "                print(e.msg)\n",
    "                return e.msg\n",
    "        db.commit()\n",
    "        db.close()\n",
    "        end = time.time()\n",
    "        print(end - start, 'seconds for single insert play')\n",
    "        s=str(end - start) + 'seconds'\n",
    "        print(file_name)\n",
    "        return s"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [],
   "source": [
    "def multi_row_play(file_name='play.csv'):\n",
    "    db = sqlcon.connect(user='root', \n",
    "                        password='*****', \n",
    "                        host='127.0.0.1', \n",
    "                        database='Project', \n",
    "                        auth_plugin='mysql_native_password')\n",
    "    cursor = db.cursor()\n",
    "    df = pd.read_csv(file_name, sep=',', header=None)\n",
    "    cols = str(df.columns.values.tolist()).replace('[','').replace(']', '')\n",
    "    values = list(zip(df[0], df[1]))\n",
    "    half = len(values) // 2\n",
    "    valuesA = values[:half]\n",
    "    valuesB = values[half:]\n",
    "    start = time.time()\n",
    "    \n",
    "    sql = \"INSERT INTO Play (PlayerID, GameID) VALUES (%s, %s)\"\n",
    "    try:\n",
    "        cursor.executemany(sql, valuesA)\n",
    "    except sqlcon.Error as e:\n",
    "        print(e.msg)\n",
    "        return e.msg\n",
    "    db.commit()\n",
    "    try:\n",
    "        cursor.executemany(sql, valuesB)\n",
    "    except sqlcon.Error as e:\n",
    "        print(e.msg)\n",
    "        return e.msg\n",
    "    db.commit()\n",
    "    db.close()\n",
    "    end = time.time()\n",
    "    print(end - start, 'seconds for multi row play')\n",
    "    s=str(end - start) + 'seconds'\n",
    "    print(file_name)\n",
    "    return s\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [],
   "source": [
    "def bulk_play(file_name='play.csv'):\n",
    "    db = sqlcon.connect(user='root', \n",
    "                        password='*****', \n",
    "                        host='127.0.0.1', \n",
    "                        database='Project', \n",
    "                        auth_plugin='mysql_native_password',\n",
    "                        allow_local_infile=True)\n",
    "    cursor = db.cursor()\n",
    "    start = time.time()\n",
    "    sql = \"LOAD DATA LOCAL INFILE \\'%s\\' INTO TABLE play FIELDS TERMINATED BY ',' ENCLOSED BY '\\\"' LINES TERMINATED BY '\\\\r\\\\n' (PlayerID, GameID)\" % (file_name)\n",
    "    try:\n",
    "        cursor.execute(sql)\n",
    "    except sqlcon.Error as e:\n",
    "        print(e.msg)\n",
    "        return e.msg\n",
    "    db.commit()\n",
    "    db.close()\n",
    "    end = time.time()\n",
    "    print(end - start, 'seconds for bulk play')\n",
    "    s=str(end - start) + 'seconds'\n",
    "    print(file_name)\n",
    "    return s"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Generate Data Functions"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "\n",
    "def generate_teams_data(numberOfRows, output_filename='teams.csv'):\n",
    "    \"\"\"creates a csv file with numberOfRows number of rows for the teams table\n",
    "    teams Table:\n",
    "    TeamID     int,\n",
    "    Team_name    varchar(20) not null,\n",
    "    city         varchar(20) not null,\n",
    "    primary key (TeamID)\n",
    "    \"\"\"\n",
    "    \n",
    "    ID_set=set() # storing the ID's since primary key should be unique.\n",
    "    list_of_rows=[]\n",
    "    with open(output_filename, mode='w', newline='') as player_file:\n",
    "        writer = csv.writer(player_file, delimiter=',')\n",
    "        \n",
    "        for _ in range(numberOfRows):\n",
    "            TeamID = randint(1, 1000000000)\n",
    "            while(TeamID in ID_set):\n",
    "                TeamID = randint(1, 1000000000)\n",
    "            ID_set.add(TeamID)\n",
    "            Team_name = random.choice(NFL_teams)\n",
    "            city = random.choice(NFL_city)\n",
    "            \n",
    "            list_of_rows.append([TeamID, Team_name, city])\n",
    "        writer.writerows(list_of_rows)\n",
    "    print(\"%s generated\" % (output_filename))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [],
   "source": [
    "def generate_players_data(numberOfRows, output_filename='players.csv'):\n",
    "    \"\"\"creates a csv file with numberOfRows number of rows for the player table\n",
    "    Player Table: \n",
    "    PlayerID     int,\n",
    "    TeamID     int,\n",
    "    FirstName:   varchar(20) not null,\n",
    "    LastName:    varchar(20) not null,\n",
    "    Position     varchar(2)  check (Position in ('QB','RB','WR')),\n",
    "    Touchdowns   int check   (Touchdowns > 0),\n",
    "    Total_Yards  int check   (Total_Yards > 0),\n",
    "    Salary       int check   (Salary > 0 ),\n",
    "    primary key (PlayerID)\n",
    "    foreign key (TeamID) references teams (TeamID)\n",
    "    \"\"\"\n",
    "    \n",
    "    ID_set=set() # storing the ID's since primary key should be unique.\n",
    "    list_of_rows=[]\n",
    "    with open(output_filename, mode='w', newline='') as player_file:\n",
    "        writer = csv.writer(player_file, delimiter=',')\n",
    "        \n",
    "        Team_IDs = get_TeamIDs()\n",
    "        \n",
    "        for _ in range(numberOfRows):\n",
    "            PlayerID = randint(1, 1000000000)\n",
    "            TeamID = random.choice(Team_IDs)\n",
    "            while(PlayerID in ID_set):\n",
    "                PlayerID = randint(1, 1000000000)\n",
    "                TeamID = random.choice(Team_IDs)\n",
    "            ID_set.add(PlayerID)\n",
    "            FirstName = ''.join(random.choice('abcdefghijklmnopqrstuvwxyz') for _ in range(5, 10))\n",
    "            LastName = ''.join(random.choice('abcdefghijklmnopqrstuvwxyz') for _ in range(5, 10))\n",
    "            Team_name = random.choice(NFL_teams)\n",
    "            Position = random.choice(('QB','RB','WR'))\n",
    "            Touchdowns = randint(1,1000)\n",
    "            Total_Yards = randint(1, 1000000)\n",
    "            Salary = randint(1000, 1000000)\n",
    "            \n",
    "            list_of_rows.append([PlayerID, TeamID, FirstName, LastName, Position, Touchdowns, Total_Yards, Salary])\n",
    "        writer.writerows(list_of_rows)\n",
    "    print(\"%s generated\" % (output_filename))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [],
   "source": [
    "def generate_games_data(numberOfRows, output_filename='games.csv'):\n",
    "    \"\"\"creates a csv file with numberOfRows number of rows for the game table\n",
    "    Game Table:\n",
    "    GameID         int,\n",
    "    Date           date,\n",
    "    Stadium        varchar(20),\n",
    "    Result         char check (Result in ('W','L','T')),\n",
    "    Attendance     int check (Attendance > 0),\n",
    "    Ticket_Revenue int check (Ticket_Revenue > 0),\n",
    "    primary key (GameID)\n",
    "    \"\"\"\n",
    "    ID_set=set()\n",
    "    list_of_rows=[]\n",
    "    with open(output_filename, mode='w', newline='') as game_file:\n",
    "        writer = csv.writer(game_file, delimiter=',')\n",
    "        \n",
    "        for _ in range(numberOfRows):\n",
    "            GameID = randint(1, 1000000)\n",
    "            while(GameID in ID_set):\n",
    "                GameID = randint(1, 1000000)\n",
    "            ID_set.add(GameID)\n",
    "            Date = random_date()\n",
    "            Stadium = random.choice(NFL_stadiums)\n",
    "            Result = random.choice(('W','L','T'))\n",
    "            Attendance = randint(1, 1000000)\n",
    "            Ticket_Revenue = randint(1, 1000000000)\n",
    "            \n",
    "            list_of_rows.append([GameID, Date, Stadium, Result, Attendance, Ticket_Revenue])\n",
    "        writer.writerows(list_of_rows)\n",
    "    print(\"%s generated\" % (output_filename))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [],
   "source": [
    "def generate_play_data(numberOfRows, output_filename='play.csv'):\n",
    "    \"\"\"creates a csv file with numberOfRows number of rows for the play table\n",
    "    Play Table:\n",
    "    PlayerID       int,\n",
    "    GameID         int,\n",
    "    primary key (PlayerID, GameID),\n",
    "    foreign key (PlayerID) references Players(PlayerID),\n",
    "    foreign key (GameID) references Games(GameID),\n",
    "    \"\"\"\n",
    "    ID_set=set()\n",
    "    list_of_rows=[]\n",
    "    with open(output_filename, mode='w', newline='') as play_file:\n",
    "        writer = csv.writer(play_file, delimiter=',')\n",
    "        \n",
    "        player_IDs = get_PlayerIDs()\n",
    "        game_IDs = get_GameIDs()\n",
    "        \n",
    "        for _ in range(numberOfRows):\n",
    "            PlayerID = random.choice(player_IDs)\n",
    "            GameID = random.choice(game_IDs)\n",
    "            while((PlayerID, GameID) in ID_set):\n",
    "                PlayerID = random.choice(player_IDs)\n",
    "                GameID = random.choice(game_IDs)\n",
    "            ID_set.add((PlayerID, GameID))\n",
    "            \n",
    "            list_of_rows.append([PlayerID, GameID])\n",
    "        writer.writerows(list_of_rows)\n",
    "    print(\"%s generated\" % (output_filename))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Retrieve functions"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [],
   "source": [
    "def retrieve_teams():\n",
    "    db = sqlcon.connect(user='root', \n",
    "                        password='*****', \n",
    "                        host='127.0.0.1', \n",
    "                        database='Project', \n",
    "                        auth_plugin='mysql_native_password')\n",
    "    cursor = db.cursor()\n",
    "    sql = \"SELECT * FROM TEAMS\"\n",
    "    cursor.execute(sql)\n",
    "    \n",
    "    with user_out:\n",
    "        print(\"Team ID, Team Name, City\")\n",
    "        for a in cursor:\n",
    "            print(a)\n",
    "    db.close()\n",
    "\n",
    "def retrieve_players():\n",
    "    db = sqlcon.connect(user='root', \n",
    "                        password='*****', \n",
    "                        host='127.0.0.1', \n",
    "                        database='Project', \n",
    "                        auth_plugin='mysql_native_password')\n",
    "    cursor = db.cursor()\n",
    "    sql = \"SELECT * FROM PLAYERS\"\n",
    "    cursor.execute(sql)\n",
    "    \n",
    "    with user_out:\n",
    "        print(\"Player ID, Team ID, First Name, Last Name, Position, Touchdowns, Total Yards, Salary\")\n",
    "        for a in cursor:\n",
    "            print(a)\n",
    "    db.close()\n",
    "\n",
    "def retrieve_games():\n",
    "    db = sqlcon.connect(user='root', \n",
    "                        password='*****', \n",
    "                        host='127.0.0.1', \n",
    "                        database='Project', \n",
    "                        auth_plugin='mysql_native_password')\n",
    "    cursor = db.cursor()\n",
    "    sql = \"SELECT * FROM GAMES\"\n",
    "    cursor.execute(sql)\n",
    "    \n",
    "    with user_out:\n",
    "        print(\"Game ID, Date, Stadium, Result, Attendance, Ticket Revenue\")\n",
    "        for a in cursor:\n",
    "            print(a)\n",
    "    db.close()\n",
    "            \n",
    "def retrieve_play():\n",
    "    db = sqlcon.connect(user='root', \n",
    "                        password='*****', \n",
    "                        host='127.0.0.1', \n",
    "                        database='Project', \n",
    "                        auth_plugin='mysql_native_password')\n",
    "    cursor = db.cursor()\n",
    "    sql = \"SELECT * FROM PLAY\"\n",
    "    cursor.execute(sql)\n",
    "    \n",
    "    with user_out:\n",
    "        print(\"Player ID, Game ID\")\n",
    "        for a in cursor:\n",
    "            print(a)\n",
    "    db.close()\n",
    "\n",
    "def retrieve_average(table, column):\n",
    "    db = sqlcon.connect(user='root', \n",
    "                        password='*****', \n",
    "                        host='127.0.0.1', \n",
    "                        database='Project', \n",
    "                        auth_plugin='mysql_native_password')\n",
    "    cursor = db.cursor()\n",
    "    sql = \"SELECT AVG(\" + column + \") FROM \" + table\n",
    "    cursor.execute(sql)\n",
    "    \n",
    "    with user_out:\n",
    "        print(\"Average of \", table, \" and \", \" column: \")\n",
    "        for a in cursor:\n",
    "            print(a)\n",
    "    db.close()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Create UI\n",
    "## output widget"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [],
   "source": [
    "user_out = w.Output(layout={'border': '1px solid black'})"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Tables"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Tables (remove, retrieve, average)\n",
    "table = w.Text(description=\"Table: \")\n",
    "table_type = w.RadioButtons(\n",
    "    options=['play', 'games','players', 'teams']\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## File upload"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [],
   "source": [
    "# File Upload\n",
    "file_upload = w.FileUpload(\n",
    "    accept='',  # Accepted file extension e.g. '.txt', '.pdf', 'image/*', 'image/*,.pdf'\n",
    "    multiple=False  # True to accept multiple files upload else False\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Single insert"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [],
   "source": [
    "single_insert = w.Button(description=\"Single Insert\")\n",
    "\n",
    "def _on_single_insert_clicked(single_insert):\n",
    "    user_out.clear_output()\n",
    "    with user_out:\n",
    "        if table_type.value == 'teams':\n",
    "            insert_teams(file_name=next(iter(file_upload.value)))    \n",
    "        elif table_type.value == 'players':\n",
    "            insert_players(file_name=next(iter(file_upload.value)))\n",
    "        elif table_type.value == 'games':\n",
    "            insert_games(file_name=next(iter(file_upload.value)))\n",
    "        elif table_type.value == 'play':\n",
    "            insert_play(file_name=next(iter(file_upload.value)))\n",
    "single_insert.on_click(_on_single_insert_clicked)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Multiple row insert"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [],
   "source": [
    "multiple_row_insert = w.Button(description=\"Multiple Row Insert\")\n",
    "\n",
    "def _on_multiple_row_insert_clicked(multiple_row_insert):\n",
    "    user_out.clear_output()\n",
    "    with user_out:\n",
    "        if table_type.value == 'teams':\n",
    "            print(\"Multi insert into teams\")\n",
    "            multi_row_teams(file_name=next(iter(file_upload.value)))\n",
    "        elif table_type.value == 'players':\n",
    "            print(\"Multi insert into players\")\n",
    "            multi_row_players(file_name=next(iter(file_upload.value)))\n",
    "        elif table_type.value == 'games':\n",
    "            print(\"Multi insert into games\")\n",
    "            multi_row_games(file_name=next(iter(file_upload.value)))\n",
    "        elif table_type.value == 'play':\n",
    "            print(\"Multi insert into play\")\n",
    "            multi_row_play(file_name=next(iter(file_upload.value)))\n",
    "            \n",
    "multiple_row_insert.on_click(_on_multiple_row_insert_clicked)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Bulk load data insert"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [],
   "source": [
    "load_data_syntax = w.Button(description=\"Load Data Syntax\")\n",
    "\n",
    "def _on_load_data_syntax_clicked(load_data_syntax):\n",
    "    user_out.clear_output()\n",
    "    with user_out:\n",
    "        if table_type.value == 'teams':\n",
    "            print(\"Bulk insert into teams\")\n",
    "            bulk_teams(file_name=next(iter(file_upload.value)))\n",
    "        elif table_type.value == 'players':\n",
    "            print(\"Bulk insert into players\")\n",
    "            bulk_players(file_name=next(iter(file_upload.value)))\n",
    "        elif table_type.value == 'games':\n",
    "            print(\"Bulk insert into games\")\n",
    "            bulk_games(file_name=next(iter(file_upload.value)))\n",
    "        elif table_type.value == 'play':\n",
    "            print(\"Bulk insert into play\")\n",
    "            bulk_play(file_name=next(iter(file_upload.value)))\n",
    "            \n",
    "load_data_syntax.on_click(_on_load_data_syntax_clicked)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Remove table"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [],
   "source": [
    "remove_table = w.Button(description=\"Remove Table\")\n",
    "\n",
    "def _on_remove_table_clicked(remove_table):\n",
    "    user_out.clear_output()\n",
    "    with user_out:\n",
    "        if table_type.value == 'teams':\n",
    "            print(\"Teams \")\n",
    "            delete_teams()    \n",
    "        elif table_type.value == 'players':\n",
    "            print(\"Players \")\n",
    "            delete_players()\n",
    "        elif table_type.value == 'games':\n",
    "            print(\"Games \")\n",
    "            delete_games()\n",
    "        elif table_type.value == 'play':\n",
    "            print(\"Play \")\n",
    "            delete_play()\n",
    "\n",
    "remove_table.on_click(_on_remove_table_clicked)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Retrieve a table"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [],
   "source": [
    "retrieve_table = w.Button(description=\"Retrieve Table\")\n",
    "\n",
    "def _on_retrieve_table_clicked(retrieve_table):\n",
    "    user_out.clear_output()\n",
    "    with user_out:\n",
    "        if table_type.value == 'teams':\n",
    "            retrieve_teams()    \n",
    "        elif table_type.value == 'players':\n",
    "            retrieve_players()\n",
    "        elif table_type.value == 'games':\n",
    "            retrieve_games()\n",
    "        elif table_type.value == 'play':\n",
    "            retrieve_play()\n",
    "\n",
    "retrieve_table.on_click(_on_retrieve_table_clicked)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Get Average"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [],
   "source": [
    "column = w.Text(description =\"Column: \")\n",
    "average_table_column = w.Button(description=\"Find Average\")\n",
    "\n",
    "def _on_average_table_column_clicked(average_table_column):\n",
    "    user_out.clear_output()\n",
    "    with user_out:\n",
    "        retrieve_average(table_type.value, column.value)\n",
    "        \n",
    "average_table_column.on_click(_on_average_table_column_clicked)\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## UI Layout"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [],
   "source": [
    "upload = w.VBox([\n",
    "    w.Label(value=\"Select a text file:\"),\n",
    "    file_upload,\n",
    "    w.Label(value=\"Select table type: \"),\n",
    "    table_type,\n",
    "    w.Label(value=\"Use one of the following methods to upload data:\"),\n",
    "    single_insert,\n",
    "    multiple_row_insert,\n",
    "    load_data_syntax,\n",
    "])\n",
    "\n",
    "delete = w.VBox([\n",
    "    w.Label(value=\"Select table type: \"),\n",
    "    table_type, \n",
    "    remove_table,\n",
    "])\n",
    "\n",
    "retrieve = w.VBox([\n",
    "    w.Label(value=\"Select table type: \"),\n",
    "    table_type, \n",
    "    retrieve_table,  \n",
    "])\n",
    "\n",
    "average = w.VBox([\n",
    "    w.Label(value=\"Select table type: \"),\n",
    "    table_type, \n",
    "    column,\n",
    "    average_table_column,\n",
    "])\n",
    "\n",
    "user_interface = w.Accordion(children=[upload, delete, retrieve, average])\n",
    "user_interface.set_title(0, 'upload')\n",
    "user_interface.set_title(1, 'delete')\n",
    "user_interface.set_title(2, 'retrieve')\n",
    "user_interface.set_title(3, 'average')\n",
    "\n",
    "user_dash = w.HBox([\n",
    "    user_interface,\n",
    "    user_out\n",
    "])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "play table cleared\n",
      "games table cleared\n",
      "players table cleared\n",
      "teams table cleared\n"
     ]
    }
   ],
   "source": [
    "# clear tables to start fresh with UI\n",
    "delete_play()\n",
    "delete_games()\n",
    "delete_players()\n",
    "delete_teams()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# UI"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "5edcdc967c80401c9418109db3cfc4f0",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "HBox(children=(Accordion(children=(VBox(children=(Label(value='Select a text file:'), FileUpload(value={}, desâ€¦"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "display(user_dash)\n",
    "user_out.clear_output()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 74,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "3c06e5e1e1f44d618d0654a29a69b93a",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Output(layout=Layout(border='1px solid black'), outputs=({'output_type': 'stream', 'text': \"Team ID, Team Nameâ€¦"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "display(user_out)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Extra Test Code"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# clear tables\n",
    "\n",
    "delete_play()\n",
    "delete_games()\n",
    "delete_players()\n",
    "delete_teams()\n",
    "\n",
    "\n",
    "# test functions 1000\n",
    "\n",
    "generate_teams_data(1000, \"teams1000.csv\")\n",
    "insert_teams(\"teams1000.csv\")\n",
    "\n",
    "generate_players_data(1000, \"players1000.csv\")\n",
    "insert_players(\"players1000.csv\")\n",
    "\n",
    "generate_games_data(1000, \"games1000.csv\")\n",
    "insert_games(\"games1000.csv\")\n",
    "\n",
    "generate_play_data(1000, \"play1000.csv\")\n",
    "insert_play(\"play1000.csv\")\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "delete_play()\n",
    "delete_games()\n",
    "delete_players()\n",
    "delete_teams()\n",
    "multi_row_teams(\"teams1000.csv\")\n",
    "multi_row_players(\"players1000.csv\")\n",
    "multi_row_games(\"games1000.csv\")\n",
    "multi_row_play(\"play1000.csv\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "delete_play()\n",
    "delete_games()\n",
    "delete_players()\n",
    "delete_teams()\n",
    "\n",
    "\n",
    "bulk_teams(\"teams1000.csv\")\n",
    "bulk_players(\"players1000.csv\")\n",
    "bulk_games(\"games1000.csv\")\n",
    "bulk_play(\"play1000.csv\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# clear tables\n",
    "\n",
    "delete_play()\n",
    "delete_games()\n",
    "delete_players()\n",
    "delete_teams()\n",
    "\n",
    "\n",
    "# test functions 100000\n",
    "\n",
    "generate_teams_data(100000, \"teams100000.csv\")\n",
    "insert_teams(\"teams100000.csv\")\n",
    "\n",
    "generate_players_data(100000, \"players100000.csv\")\n",
    "insert_players(\"players100000.csv\")\n",
    "\n",
    "generate_games_data(100000, \"games100000.csv\")\n",
    "insert_games(\"games100000.csv\")\n",
    "\n",
    "generate_play_data(100000, \"play100000.csv\")\n",
    "insert_play(\"play100000.csv\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "delete_play()\n",
    "delete_games()\n",
    "delete_players()\n",
    "delete_teams()\n",
    "multi_row_teams(\"teams100000.csv\")\n",
    "multi_row_players(\"players100000.csv\")\n",
    "multi_row_games(\"games100000.csv\")\n",
    "multi_row_play(\"play100000.csv\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "delete_play()\n",
    "delete_games()\n",
    "delete_players()\n",
    "delete_teams()\n",
    "\n",
    "\n",
    "bulk_teams(\"teams100000.csv\")\n",
    "bulk_players(\"players100000.csv\")\n",
    "bulk_games(\"games100000.csv\")\n",
    "bulk_play(\"play100000.csv\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "bulk_games(\"games1000000.csv\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# clear tables\n",
    "\n",
    "delete_play()\n",
    "delete_games()\n",
    "delete_players()\n",
    "delete_teams()\n",
    "\n",
    "\n",
    "# test functions 1000000\n",
    "\n",
    "generate_teams_data(1000000, \"teams1000000.csv\")\n",
    "insert_teams(\"teams1000000.csv\")\n",
    "\n",
    "generate_players_data(1000000, \"players1000000.csv\")\n",
    "insert_players(\"players1000000.csv\")\n",
    "\n",
    "generate_games_data(1000000, \"games1000000.csv\")\n",
    "insert_games(\"games1000000.csv\")\n",
    "\n",
    "generate_play_data(1000000, \"play1000000.csv\")\n",
    "insert_play(\"play1000000.csv\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "delete_play()\n",
    "delete_games()\n",
    "delete_players()\n",
    "delete_teams()\n",
    "multi_row_teams(\"teams1000000.csv\")\n",
    "multi_row_players(\"players1000000.csv\")\n",
    "multi_row_games(\"games1000000.csv\")\n",
    "multi_row_play(\"play1000000.csv\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "delete_play()\n",
    "delete_games()\n",
    "delete_players()\n",
    "delete_teams()\n",
    "bulk_teams(\"teams1000000.csv\")\n",
    "bulk_players(\"players1000000.csv\")\n",
    "bulk_games(\"games1000000.csv\")\n",
    "bulk_play(\"play1000000.csv\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "dataSize = [1000, 100000, 1000000]\n",
    "teamsTimeSingle = [0.13682198524475098, 12.603698968887329, 126.55780601501465]\n",
    "teamsTimeMulti = [0.012310028076171875, 1.530973196029663, 13.74002981185913]\n",
    "teamsTimeBulk = [0.007586240768432617, 0.761115312576294,14.739612817764282]\n",
    "\n",
    "playersTimeSingle = [0.18940401077270508, 16.467517852783203, 197.9443929195404]\n",
    "playersTimeMulti = [0.02847886085510254, 3.152730703353882, 64.35697484016418]\n",
    "playersTimeBulk = [0.01456904411315918, 2.0501699447631836, 48.638970136642456]\n",
    "\n",
    "gamesTimeSingle = [0.14987802505493164, 14.354168176651001, 142.04881381988525]\n",
    "gamesTimeMulti = [0.017287254333496094, 1.7814829349517822, 19.723872900009155]\n",
    "gamesTimeBulk = [0.008643150329589844, 0.85105299949646, 9.453365087509155]\n",
    "\n",
    "playTimeSingle = [0.13208985328674316, 14.47389817237854, 164.2709460258484]\n",
    "playTimeMulti = [0.0174257755279541, 2.274960994720459, 43.21596598625183]\n",
    "playTimeBulk = [0.014802932739257812, 1.9068458080291748, 35.553751707077026]\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "df2=pd.DataFrame({'x': dataSize, 'Single': teamsTimeSingle, 'Multi': teamsTimeMulti, 'Bulk': teamsTimeBulk })\n",
    " \n",
    "# multiple line plot\n",
    "plt.plot( 'x', 'Single', data=df2, marker='o', color='skyblue', linewidth=2)\n",
    "plt.plot( 'x', 'Multi', data=df2, marker='x', color='yellow', linewidth=4)\n",
    "plt.plot( 'x', 'Bulk', data=df2, marker='p', color='red', linewidth=2, linestyle='dashed')\n",
    "plt.title('Time to Insert Teams')\n",
    "plt.xlabel('Number of Entries')\n",
    "plt.ylabel('Time (seconds)')\n",
    "plt.legend()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "df3=pd.DataFrame({'x': dataSize, 'Single': playersTimeSingle, 'Multi': playersTimeMulti, 'Bulk': playersTimeBulk })\n",
    " \n",
    "# multiple line plot\n",
    "plt.plot( 'x', 'Single', data=df3, marker='o', color='skyblue', linewidth=2)\n",
    "plt.plot( 'x', 'Multi', data=df3, marker='x', color='yellow', linewidth=4)\n",
    "plt.plot( 'x', 'Bulk', data=df3, marker='p', color='red', linewidth=2, linestyle='dashed')\n",
    "plt.title('Time to Insert Players')\n",
    "plt.xlabel('Number of Entries')\n",
    "plt.ylabel('Time (seconds)')\n",
    "plt.legend()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "df4=pd.DataFrame({'x': dataSize, 'Single': gamesTimeSingle, 'Multi': gamesTimeMulti, 'Bulk': gamesTimeBulk })\n",
    " \n",
    "# multiple line plot\n",
    "plt.plot( 'x', 'Single', data=df4, marker='o', color='skyblue', linewidth=2)\n",
    "plt.plot( 'x', 'Multi', data=df4, marker='x', color='yellow', linewidth=4)\n",
    "plt.plot( 'x', 'Bulk', data=df4, marker='p', color='red', linewidth=2, linestyle='dashed')\n",
    "plt.title('Time to Insert Games')\n",
    "plt.xlabel('Number of Entries')\n",
    "plt.ylabel('Time (seconds)')\n",
    "plt.legend()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "df5=pd.DataFrame({'x': dataSize, 'Single': playTimeSingle, 'Multi': playTimeMulti, 'Bulk': playTimeBulk })\n",
    " \n",
    "# multiple line plot\n",
    "plt.plot( 'x', 'Single', data=df5, marker='o', color='skyblue', linewidth=2)\n",
    "plt.plot( 'x', 'Multi', data=df5, marker='x', color='yellow', linewidth=4)\n",
    "plt.plot( 'x', 'Bulk', data=df5, marker='p', color='red', linewidth=2, linestyle='dashed')\n",
    "plt.title('Time to Insert Play')\n",
    "plt.xlabel('Number of Entries')\n",
    "plt.ylabel('Time (seconds)')\n",
    "plt.legend()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.9"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}

